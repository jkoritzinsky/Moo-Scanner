import java_cup.runtime.*; // defines the Symbol class
import java.math.BigInteger;

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

// A cache for the fields in the sym class
class SymFields {
    static SymFields instance = new SymFields();

    private java.lang.reflect.Field[] fields;

    private SymFields() {
        fields = sym.class.getDeclaredFields();
    }

    int getTokenId(String tokenName) {
        try {
            for(java.lang.reflect.Field field : fields) {
                if(java.lang.reflect.Modifier.isStatic(field.getModifiers())
                    && field.getName().compareToIgnoreCase(tokenName) == 0) {
                    return (int)field.get(null);
                }
            }
        } catch(IllegalAccessException e) {
            return -1;
        }
        return -1;
    }
}
%%
IDENTIFIER = [A-Za-z_][A-Za-z0-9_]*
ESCAPED = [\\][nt'?\"\\]
ESCAPED_BAD = [\\][^nt'\"?\\]
COMMENT_START =//|#
STRING_CHAR = [^\n\"\\]
DIGIT=        [0-9]
WHITESPACE=   [\040\t]
QUOTE = \042

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol
%state comment

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

{COMMENT_START} {
    CharNum.num += yytext().length();
    yybegin(comment);
}

<comment>.* {
    CharNum.num += yytext().length();
}
<comment>[\n] {
    yybegin(YYINITIAL);
    CharNum.num = 1;
}

"bool"|"int"|"void"|"true"|"false"|"struct"|"cin"|"cout"|"if"|"else"|"while"|"return" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(SymFields.instance.getTokenId(yytext()), tok);
    CharNum.num += yytext().length();
    return S;
}

{IDENTIFIER} {
        Symbol S = new Symbol(sym.ID,
            new IdTokenVal(yyline + 1, CharNum.num, yytext()));
        CharNum.num += yytext().length();
        return S;
    }


{QUOTE}({STRING_CHAR}|{ESCAPED})*{QUOTE}  {
                                    Symbol S = new Symbol(sym.STRINGLITERAL,
                                        new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
                                    CharNum.num += yytext().length();
                                    return S;
                               }

{QUOTE}({STRING_CHAR}|{ESCAPED}|{ESCAPED_BAD})*{QUOTE}  {
                                    ErrMsg.fatal(yyline+1, CharNum.num,
                                        "string literal with bad escaped character ignored");
                                    CharNum.num += yytext().length();
                               }

{QUOTE}({STRING_CHAR}|{ESCAPED})*  {
                                    ErrMsg.fatal(yyline + 1, CharNum.num,
                                        "unterminated string literal ignored");
                                    CharNum.num += yytext().length();
                                }

{QUOTE}({STRING_CHAR}|{ESCAPED}|{ESCAPED_BAD})*  {
                                    ErrMsg.fatal(yyline+1, CharNum.num,
                                        "unterminated string literal with bad escaped character ignored");
                                    CharNum.num += yytext().length();
                               }

{DIGIT}+  {
            BigInteger bigInt = new BigInteger(yytext());
            int val;
            if (bigInt.compareTo(new BigInteger(Integer.toString(Integer.MAX_VALUE))) == 1) {
               String msg = "integer literal too large; using max value";
               ErrMsg.warn(yyline+1, CharNum.num, msg);
               val = Integer.MAX_VALUE;
            }
            else
               val = (new Integer(yytext())).intValue();
            Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return S;
          }

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"{"       { Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"}"       { Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"("       { Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

")"       { Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

";"       { Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

","       { Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"."       { Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"<<"      { Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

">>"      { Symbol S = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"++"      { Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"--"      { Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"-"       { Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"*"       { Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"/"       { Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"&&"      { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"||"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"!="      { Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"!"       { Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"=="      { Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

">="      { Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"<="      { Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"<"       { Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

">"       { Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"="       { Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num += yytext().length();
          }
