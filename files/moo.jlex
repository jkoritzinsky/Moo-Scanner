import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
WHITESPACE=   [\040\t]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

"bool" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.BOOL, tok);
    CharNum.num += yytext().length();
    return S;
}

"int" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.INT, tok);
    CharNum.num += yytext().length();
    return S;
}
"void" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.VOID, tok);
    CharNum.num += yytext().length();
    return S;
}
"true" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.TRUE, tok);
    CharNum.num += yytext().length();
    return S;
}
"false" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.FALSE, tok);
    CharNum.num += yytext().length();
    return S;
}
"struct" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.STRUCT, tok);
    CharNum.num += yytext().length();
    return S;
}
"cin" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.CIN, tok);
    CharNum.num += yytext().length();
    return S;
}
"cout" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.COUT, tok);
    CharNum.num += yytext().length();
    return S;
}
"if" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.IF, tok);
    CharNum.num += yytext().length();
    return S;
}
"else" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.ELSE, tok);
    CharNum.num += yytext().length();
    return S;
}
"while" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.WHILE, tok);
    CharNum.num += yytext().length();
    return S;
}
"return" {
    TokenVal tok = new TokenVal(yyline+1, CharNum.num);
    Symbol S = new Symbol(sym.RETURN, tok);
    CharNum.num += yytext().length();
    return S;
}

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
            int val = (new Integer(yytext())).intValue();
            Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return S;
          }

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }
        
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }
